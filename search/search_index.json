{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#indexmd","title":"index.md","text":""},{"location":"#zksnap-privacy-preserving-collusion-resistant-voting","title":"ZkSnap: Privacy-Preserving, Collusion-Resistant Voting","text":"<p>ZkSnap is a zero-knowledge voting protocol designed for decentralized organizations that provides:     - Complete vote privacy     - Prevention of vote buying and selling     - Zero-cost voting     - Universal result verification</p>"},{"location":"#key-properties","title":"Key Properties","text":"<ol> <li>Vote Privacy: No one, including system operators, can determine individual votes</li> <li>Collusion Resistance: Voters cannot prove their vote choice to others</li> <li>Non-interactivity: Voters can cast votes without coordination</li> <li>Universal Verifiability: Anyone can verify vote counting accuracy</li> </ol>"},{"location":"#protocol-components","title":"Protocol Components","text":"<ol> <li>Dual Key System</li> <li>Registration keys for eligibility</li> <li> <p>Evolving voting keys for collusion prevention</p> </li> <li> <p>Time-Locked Privacy</p> <ul> <li>Vote contents remain encrypted during voting</li> <li>Results revealed only after deadline</li> </ul> </li> <li> <p>Zero-Knowledge Proofs</p> <ul> <li>Vote validity verification</li> <li>Private vote aggregation</li> </ul> </li> <li> <p>Deterministic Nullifiers</p> <ul> <li>Double-vote prevention</li> <li>Vote linkability prevention</li> </ul> </li> </ol>"},{"location":"getting-started/","title":"getting-started.md","text":""},{"location":"getting-started/#getting-startedmd","title":"getting-started.md","text":""},{"location":"getting-started/#getting-started-with-zksnap","title":"Getting Started with ZkSnap","text":"<p>This guide provides a high-level overview of the ZkSnap protocol and its core components. </p>"},{"location":"getting-started/#basic-concepts","title":"Basic Concepts","text":""},{"location":"getting-started/#what-is-zksnap","title":"What is ZkSnap?","text":"<p>ZkSnap is a protocol that enables private, verifiable voting while preventing vote buying and coercion. It achieves this through:     - A dual key system for voter privacy     - Time-locked vote revelation     - Zero-knowledge proofs for verification</p>"},{"location":"getting-started/#key-components","title":"Key Components","text":"<ol> <li> <p>Voter Keys</p> <ul> <li>Registration Key: Proves voting eligibility</li> <li>Voting Key: Used to cast votes, can be changed privately</li> </ul> </li> <li> <p>Vote Structure</p> <ul> <li>Encrypted vote choice</li> <li>Nullifier to prevent double voting</li> <li>Zero-knowledge proof of validity</li> </ul> </li> <li> <p>Coordinator</p> <ul> <li>Processes votes</li> <li>Maintains vote state</li> <li>Generates aggregate proofs</li> </ul> </li> </ol>"},{"location":"getting-started/#protocol-flow","title":"Protocol Flow","text":"<ol> <li> <p>Setup Phase</p> <ul> <li>System parameters generated</li> <li>Voter registration opens</li> <li>Timelock parameters established</li> </ul> </li> <li> <p>Voting Phase</p> <ul> <li>Voters create encrypted votes</li> <li>Submit votes with proofs</li> <li>Can privately change voting keys</li> </ul> </li> <li> <p>Tallying Phase</p> <ul> <li>Timelock expires</li> <li>Votes decrypted and counted</li> <li>Results verified</li> </ul> </li> </ol>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<ul> <li>User Guide here</li> <li>Understand core protocol concepts</li> <li>Learn about collusion resistance</li> <li>Review security model</li> </ul>"},{"location":"guides/user-guide/","title":"User Guide","text":""},{"location":"protocol/overview/","title":"Overview","text":""},{"location":"protocol/overview/#protocol-overview","title":"Protocol Overview","text":"<p>ZkSnap is a privacy-preserving voting protocol that enables anonymous, verifiable voting while preventing vote buying and coercion. It achieves this through a combination of zero-knowledge proofs, homomorphic encryption, and a novel key management system.</p>"},{"location":"protocol/overview/#protocol-goals","title":"Protocol Goals","text":"<p>ZkSnap is designed to achieve several critical properties:</p> <ol> <li> <p>Vote Privacy</p> <ul> <li>Individual votes remain secret</li> <li>Vote contents are encrypted until tallying</li> <li>No correlation between voters and votes</li> </ul> </li> <li> <p>Collusion Resistance</p> <ul> <li>Prevents vote buying/selling</li> <li>Voters cannot prove their vote choice</li> <li>Key changes remain private</li> </ul> </li> <li> <p>Vote Integrity</p> <ul> <li>One vote per eligible voter</li> <li>All valid votes are counted</li> <li>Results are verifiable</li> </ul> </li> <li> <p>Efficiency</p> <ul> <li>Zero cost for voters</li> <li>Minimal on-chain footprint</li> <li>Efficient proof verification</li> </ul> </li> </ol>"},{"location":"protocol/overview/#system-participants","title":"System Participants","text":""},{"location":"protocol/overview/#1-voters","title":"1. Voters","text":"<pre><code>- Hold registration and voting keys\n- Create encrypted votes\n- Generate zero-knowledge proofs\n</code></pre>"},{"location":"protocol/overview/#2-coordinator","title":"2. Coordinator","text":"<pre><code>- Manages vote collection\n- Aggregates encrypted votes\n- Generates aggregate proofs\n- Cannot manipulate votes\n</code></pre>"},{"location":"protocol/overview/#3-verifiers","title":"3. Verifiers","text":"<pre><code>- Anyone can verify results\n- Check proof validity\n- Verify final tally\n</code></pre>"},{"location":"protocol/overview/#core-components","title":"Core Components","text":""},{"location":"protocol/overview/#1-dual-key-system","title":"1. Dual Key System","text":"<p>The protocol uses two types of keys:     - Registration Key: Proves voting eligibility     - Voting Key: Used for actual vote casting         - Can be changed privately         - Changes are undetectable</p>"},{"location":"protocol/overview/#2-nullifier-system","title":"2. Nullifier System","text":"<p>Prevents double voting while maintaining privacy:     - One nullifier per voter     - Deterministically generated     - Cannot be linked to voter identity</p>"},{"location":"protocol/overview/#3-vote-structure","title":"3. Vote Structure","text":"<p>Each vote contains:     - Encrypted vote choice     - Vote nullifier     - Zero-knowledge proof     - Public parameters</p>"},{"location":"protocol/overview/#4-time-lock-system","title":"4. Time Lock System","text":"<p>Ensures vote privacy during voting: - Encrypts vote contents - Decryption key time-locked - Results revealed only after voting ends</p>"},{"location":"protocol/overview/#protocol-flow","title":"Protocol Flow","text":""},{"location":"protocol/overview/#1-setup-phase","title":"1. Setup Phase","text":"<pre><code>1. System parameters generated\n2. Coordinator publishes public key\n3. Time-lock parameters established\n4. Voter registration begins\n</code></pre>"},{"location":"protocol/overview/#2-voting-phase","title":"2. Voting Phase","text":"<pre><code>1. Voter creates encrypted vote\n2. Generates nullifier\n3. Produces validity proof\n4. Submits vote package\n</code></pre>"},{"location":"protocol/overview/#3-tallying-phase","title":"3. Tallying Phase","text":"<pre><code>1. Time lock expires\n2. Votes decrypted\n3. Results computed\n4. Proofs verified\n</code></pre>"},{"location":"protocol/overview/#security-properties","title":"Security Properties","text":""},{"location":"protocol/overview/#guaranteed-properties","title":"Guaranteed Properties","text":"<pre><code>- No one can determine individual votes\n- Votes cannot be changed or deleted\n- Double voting is impossible\n- Results are verifiable\n- Vote buying is ineffective\n</code></pre>"},{"location":"protocol/overview/#trust-assumptions","title":"Trust Assumptions","text":"<pre><code>- Coordinator is semi-honest\n- Time-lock mechanism is secure\n- Cryptographic primitives are secure\n- ZK proof system is sound\n</code></pre>"},{"location":"protocol/overview/#protocol-innovations","title":"Protocol Innovations","text":"<ol> <li> <p>Key Privacy</p> <ul> <li>Private key evolution</li> <li>Undetectable changes</li> <li>Maintained vote validity</li> </ul> </li> <li> <p>Nullifier Design</p> <ul> <li>Efficient verification</li> <li>Privacy preserving</li> <li>Double-spend prevention</li> </ul> </li> <li> <p>Proof System</p> <ul> <li>Vote validity proofs</li> <li>Aggregation proofs</li> <li>Efficient verification</li> </ul> </li> </ol>"},{"location":"protocol/components/key-system/","title":"Dual Key System","text":""},{"location":"protocol/components/key-system/#dual-key-system","title":"Dual Key System","text":"<p>The dual key system in ZkSnap forms the foundation of its privacy and collusion resistance properties. It consists of two distinct key pairs that serve different purposes in the protocol.</p>"},{"location":"protocol/components/key-system/#overview","title":"Overview","text":""},{"location":"protocol/components/key-system/#key-types","title":"Key Types","text":"<ol> <li> <p>Registration Key</p> <ul> <li>Permanent, identity-linked key pair</li> <li>Used to prove voting eligibility</li> <li>Registered in the voter Merkle tree</li> <li>Never used for actual voting</li> </ul> </li> <li> <p>Voting Key</p> <ul> <li>Used for casting votes</li> <li>Can be privately changed</li> <li>No public link to registration key</li> <li>Generates vote nullifiers</li> </ul> </li> </ol>"},{"location":"protocol/components/key-system/#key-structures","title":"Key Structures","text":""},{"location":"protocol/components/key-system/#registration-key","title":"Registration Key","text":"<pre><code>RegistrationKey {\n    public: Field,    // Public key for registration\n    private: Field,   // Private key known only to voter\n}\n</code></pre>"},{"location":"protocol/components/key-system/#voting-key","title":"Voting Key","text":"<pre><code>VotingKey {\n    public: Field,    // Current public voting key\n    private: Field,   // Current private voting key\n}\n</code></pre>"},{"location":"protocol/components/key-system/#key-operations","title":"Key Operations","text":""},{"location":"protocol/components/key-system/#key-generation","title":"Key Generation","text":"<ol> <li> <p>Registration Key Generation</p> <ul> <li>Generated during voter registration</li> <li>Added to voter Merkle tree</li> <li>Used to prove eligibility</li> </ul> </li> <li> <p>Voting Key Generation</p> <ul> <li>Independent from registration key</li> <li>Can generate multiple keys</li> <li>No on-chain record of changes</li> </ul> </li> </ol>"},{"location":"protocol/components/key-system/#key-changes","title":"Key Changes","text":"<p>The ability to change voting keys privately is crucial for collusion resistance:</p> <ol> <li> <p>Change Process</p> <ul> <li>Generate new voting key pair</li> <li>No public record of change</li> <li>Old key remains valid for verification</li> <li>New key used for voting</li> </ul> </li> <li> <p>Privacy Properties</p> </li> <li>Changes are undetectable</li> <li>No link between keys</li> <li>Cannot prove which key was used</li> <li>Maintains vote validity</li> </ol>"},{"location":"protocol/components/key-system/#protocol-interactions","title":"Protocol Interactions","text":""},{"location":"protocol/components/key-system/#during-setup","title":"During Setup","text":"<pre><code>1. Generate registration key pair\n2. Register public key in Merkle tree\n3. Generate initial voting key pair\n4. Prepare for vote casting\n</code></pre>"},{"location":"protocol/components/key-system/#during-voting","title":"During Voting","text":"<pre><code>1. Use voting key to create vote\n2. Generate nullifier with voting key\n3. Prove knowledge of registration key\n4. Sign vote with voting key\n</code></pre>"},{"location":"protocol/components/key-system/#security-properties","title":"Security Properties","text":""},{"location":"protocol/components/key-system/#guaranteed-properties","title":"Guaranteed Properties","text":"<ol> <li> <p>Key Separation</p> <ul> <li>Registration key cannot be used to vote</li> <li>Voting key cannot be used to register</li> <li>No linkability between keys</li> </ul> </li> <li> <p>Change Privacy</p> <ul> <li>Key changes are private</li> <li>Cannot detect if keys changed</li> <li>Cannot link multiple keys</li> </ul> </li> <li> <p>Collusion Resistance</p> <ul> <li>Cannot prove which key was used</li> <li>Cannot prove vote choice</li> <li>Deniable vote authorship</li> </ul> </li> </ol>"},{"location":"protocol/components/key-system/#security-requirements","title":"Security Requirements","text":"<ol> <li> <p>Registration Key</p> <ul> <li>Must remain secret</li> <li>Only used for eligibility proofs</li> <li>Never revealed in transactions</li> </ul> </li> <li> <p>Voting Key</p> </li> <li>Can be changed at will</li> <li>Changes remain private</li> <li>Used for vote creation</li> </ol>"},{"location":"protocol/components/key-system/#circuit-integration","title":"Circuit Integration","text":""},{"location":"protocol/components/key-system/#registration-circuit","title":"Registration Circuit","text":"<pre><code>Public Inputs:\n- Merkle root\n- Public registration key\n\nPrivate Inputs:\n- Private registration key\n- Merkle path\n\nProves:\n- Knowledge of private key\n- Inclusion in Merkle tree\n</code></pre>"},{"location":"protocol/components/key-system/#voting-circuit","title":"Voting Circuit","text":"<pre><code>Public Inputs:\n- Vote nullifier\n- Encrypted vote\n- Public voting key\n\nPrivate Inputs:\n- Private voting key\n- Vote choice\n- Registration key proof\n\nProves:\n- Valid key ownership\n- Correct vote encryption\n- Registration status\n</code></pre>"},{"location":"protocol/components/nullifiers/","title":"Nullifier System","text":""},{"location":"protocol/components/nullifiers/#nullifier-system","title":"Nullifier System","text":"<p>The nullifier system in ZkSnap prevents double voting while maintaining voter privacy. It uses PLUME (Pseudonymously Linked Unique Message Entity) for generating deterministic nullifiers that ensure each eligible voter can only cast one valid vote.</p>"},{"location":"protocol/components/nullifiers/#nullifier-design","title":"Nullifier Design","text":""},{"location":"protocol/components/nullifiers/#structure","title":"Structure","text":"<pre><code>Nullifier = PLUME_sign(\n    privateKey,    // Voter's private key\n    voteData      // Vote-specific data\n)\n</code></pre>"},{"location":"protocol/components/nullifiers/#properties","title":"Properties","text":"<ol> <li>Deterministic</li> <li>Same inputs always produce same nullifier</li> <li>No randomness in generation</li> <li> <p>Verifiably unique per voter</p> </li> <li> <p>Private</p> </li> <li>Cannot link to voter identity</li> <li>Cannot link to vote contents</li> <li> <p>Cannot predict future nullifiers</p> </li> <li> <p>Verifiable</p> </li> <li>Efficient membership checking</li> <li>Public verification</li> <li>No private data needed for verification</li> </ol>"},{"location":"protocol/components/nullifiers/#generation-process","title":"Generation Process","text":""},{"location":"protocol/components/nullifiers/#components","title":"Components","text":"<ol> <li>Inputs Required</li> <li>Voter's private key</li> <li>Vote parameters</li> <li> <p>Protocol constants</p> </li> <li> <p>Output Properties</p> </li> <li>Fixed-size value</li> <li>Uniform distribution</li> <li>Collision resistant</li> </ol>"},{"location":"protocol/components/nullifiers/#generation-steps","title":"Generation Steps","text":"<pre><code>1. Combine inputs with domain separator\n2. Generate PLUME signature\n3. Hash signature to create nullifier\n4. Verify uniqueness\n</code></pre>"},{"location":"protocol/components/nullifiers/#verification-system","title":"Verification System","text":""},{"location":"protocol/components/nullifiers/#state-management","title":"State Management","text":"<ol> <li>Nullifier Set</li> <li>Maintains all used nullifiers</li> <li>Efficient lookup structure</li> <li> <p>Indexed Merkle tree implementation</p> </li> <li> <p>Verification Process</p> </li> <li>Check nullifier not previously used</li> <li>Verify nullifier correctness</li> <li>Update nullifier set</li> </ol>"},{"location":"protocol/components/nullifiers/#circuit-integration","title":"Circuit Integration","text":"<pre><code>Public Inputs:\n- Nullifier value\n- Nullifier tree root\n\nPrivate Inputs:\n- Private key\n- Vote data\n- Generation parameters\n\nCircuit Constraints:\n- Correct nullifier generation\n- Valid signature verification\n- Proper input formatting\n</code></pre>"},{"location":"protocol/components/nullifiers/#security-properties","title":"Security Properties","text":""},{"location":"protocol/components/nullifiers/#guaranteed-properties","title":"Guaranteed Properties","text":"<ol> <li>Double-Vote Prevention</li> <li>Each voter gets one valid vote</li> <li>Cannot reuse nullifiers</li> <li> <p>Cannot forge valid nullifiers</p> </li> <li> <p>Privacy Preservation</p> </li> <li>No identity leakage</li> <li>No vote content leakage</li> <li> <p>No key correlation possible</p> </li> <li> <p>Verifiability</p> </li> <li>Public verification possible</li> <li>Efficient checking</li> <li>No trust requirements</li> </ol>"},{"location":"protocol/components/nullifiers/#security-requirements","title":"Security Requirements","text":"<ol> <li>Cryptographic Properties</li> <li>Collision resistance</li> <li>Pre-image resistance</li> <li> <p>Second pre-image resistance</p> </li> <li> <p>Privacy Requirements</p> </li> <li>Nullifier unlinkability</li> <li>Input hiding</li> <li>Key hiding</li> </ol>"},{"location":"protocol/components/nullifiers/#implementation-details","title":"Implementation Details","text":""},{"location":"protocol/components/nullifiers/#nullifier-tree","title":"Nullifier Tree","text":"<ol> <li>Structure</li> <li>Indexed Merkle tree</li> <li>Efficient inclusion proofs</li> <li> <p>O(log n) verification</p> </li> <li> <p>Operations</p> </li> <li>Insert new nullifier</li> <li>Check nullifier existence</li> <li>Generate inclusion proofs</li> </ol>"},{"location":"protocol/components/nullifiers/#plume-integration","title":"PLUME Integration","text":"<ol> <li> <p>Signature Generation </p><pre><code>Input: \n- Private key sk\n- Message m\n\nOutput:\n- Deterministic signature \u03c3\n- Nullifier N = H(\u03c3)\n\nProperties:\n- \u03c3 = PLUME_sign(sk, m)\n- Verification with public key\n- Unique per (key, message) pair\n</code></pre> </li> <li> <p>Verification Process </p><pre><code>1. Check nullifier format\n2. Verify PLUME signature\n3. Confirm tree non-membership\n4. Update nullifier set\n</code></pre> </li> </ol>"},{"location":"protocol/components/nullifiers/#protocol-integration","title":"Protocol Integration","text":""},{"location":"protocol/components/nullifiers/#during-vote-creation","title":"During Vote Creation","text":"<ol> <li> <p>Nullifier Generation</p> <ul> <li>Create vote data</li> <li>Generate PLUME signature</li> <li>Derive nullifier</li> <li>Prepare inclusion proof</li> </ul> </li> <li> <p>Vote Submission</p> <ul> <li>Include nullifier in vote</li> <li>Prove nullifier correctness</li> <li>Submit to coordinator</li> </ul> </li> </ol>"},{"location":"protocol/components/nullifiers/#during-vote-processing","title":"During Vote Processing","text":"<ol> <li> <p>Coordinator Actions</p> <ul> <li>Verify nullifier uniqueness</li> <li>Update nullifier tree</li> <li>Generate new root</li> <li>Create inclusion proof</li> </ul> </li> <li> <p>Verification Steps</p> <ul> <li>Check nullifier validity</li> <li>Verify tree updates</li> <li>Confirm non-membership proofs</li> </ul> </li> </ol>"},{"location":"protocol/components/timelock/","title":"Timelock Encryption","text":""},{"location":"protocol/components/timelock/#timelock-encryption","title":"Timelock Encryption","text":"<p>ZkSnap uses timelock encryption to ensure vote privacy during the voting period and prevent early result calculations. The system uses DRand for distributed timelock encryption.</p>"},{"location":"protocol/components/timelock/#overview","title":"Overview","text":""},{"location":"protocol/components/timelock/#purpose","title":"Purpose","text":"<pre><code>- Prevent early vote counting\n- Ensure vote privacy during voting\n- Enable verifiable decryption timing\n- Prevent coordinator manipulation\n</code></pre>"},{"location":"protocol/components/timelock/#properties","title":"Properties","text":"<pre><code>- Time-based encryption\n- Distributed trust\n- Verifiable delay\n- Guaranteed decryption\n</code></pre>"},{"location":"protocol/components/timelock/#timelock-components","title":"Timelock Components","text":""},{"location":"protocol/components/timelock/#1-encryption-system","title":"1. Encryption System","text":"<pre><code>Components:\n- Public encryption key (available immediately)\n- Private decryption key (time-locked)\n- Timelock parameters\n- Verification parameters\n</code></pre>"},{"location":"protocol/components/timelock/#2-time-periods","title":"2. Time Periods","text":"<pre><code>Phases:\n1. Setup: Parameter generation\n2. Voting: Votes remain encrypted\n3. Unlock: Decryption key revealed\n4. Tallying: Results computed\n</code></pre>"},{"location":"protocol/components/timelock/#protocol-operations","title":"Protocol Operations","text":""},{"location":"protocol/components/timelock/#setup-phase","title":"Setup Phase","text":"<ol> <li> <p>Parameter Generation </p><pre><code>- Generate encryption keypair (pk, sk)\n- Set voting duration parameter T\n- Create timelock puzzle for sk\n- Publish encryption parameters\n</code></pre> </li> <li> <p>Timelock Creation </p><pre><code>Input:\n- Decryption key sk\n- Time parameter T\n- DRand parameters\n\nOutput:\n- Encrypted key E(sk)\n- Verification parameters\n- Public parameters\n</code></pre> </li> </ol>"},{"location":"protocol/components/timelock/#vote-encryption","title":"Vote Encryption","text":"<ol> <li> <p>Vote Processing </p><pre><code>- Encrypt vote with public key\n- Add randomness for security\n- Generate encryption proof\n- Submit encrypted package\n</code></pre> </li> <li> <p>Encryption Properties </p><pre><code>- Homomorphic addition\n- Verifiable encryption\n- Randomized\n- Timelock compatible\n</code></pre> </li> </ol>"},{"location":"protocol/components/timelock/#key-revelation","title":"Key Revelation","text":"<ol> <li> <p>Timelock Expiration </p><pre><code>- DRand reveals decryption key\n- Verify key correctness\n- Enable vote decryption\n- Begin tallying phase\n</code></pre> </li> <li> <p>Verification Process </p><pre><code>- Check timelock completion\n- Verify key authenticity\n- Confirm proper timing\n- Validate parameters\n</code></pre> </li> </ol>"},{"location":"protocol/components/timelock/#security-properties","title":"Security Properties","text":""},{"location":"protocol/components/timelock/#guaranteed-properties","title":"Guaranteed Properties","text":"<ol> <li>Time Security</li> <li>No early decryption possible</li> <li>Verifiable delay function</li> <li> <p>Distributed trust model</p> </li> <li> <p>Encryption Security</p> </li> <li>IND-CPA security</li> <li>Forward security</li> <li> <p>Collusion resistance</p> </li> <li> <p>Verification Properties</p> </li> <li>Public verifiability</li> <li>Proof of correct encryption</li> <li>Proof of proper timing</li> </ol>"},{"location":"protocol/components/timelock/#trust-assumptions","title":"Trust Assumptions","text":"<ol> <li>Timelock Service</li> <li>DRand security model</li> <li>Threshold trust assumption</li> <li> <p>Byzantine fault tolerance</p> </li> <li> <p>Cryptographic Assumptions</p> </li> <li>Hardness of time-lock puzzles</li> <li>Security of encryption scheme</li> <li>Random oracle model</li> </ol>"},{"location":"protocol/components/timelock/#implementation-details","title":"Implementation Details","text":""},{"location":"protocol/components/timelock/#encryption-scheme","title":"Encryption Scheme","text":"<ol> <li> <p>Vote Encryption </p><pre><code>Input: \n- Vote v\n- Public key pk\n- Random value r\n\nOutput:\n- Encrypted vote c\n- Encryption proof \u03c0\n\nProperties:\n- Homomorphic\n- Verifiable\n- Non-malleable\n</code></pre> </li> <li> <p>Key Management </p><pre><code>Components:\n- DRand beacon\n- Timelock parameters\n- Verification keys\n- Proof system\n</code></pre> </li> </ol>"},{"location":"protocol/components/timelock/#verification-system","title":"Verification System","text":"<ol> <li> <p>Setup Verification </p><pre><code>Verify:\n- Parameter generation\n- Timelock creation\n- Public key distribution\n- Initial state\n</code></pre> </li> <li> <p>Operation Verification </p><pre><code>Check:\n- Vote encryption\n- Timelock progression\n- Key revelation\n- Decryption process\n</code></pre> </li> </ol>"},{"location":"protocol/components/timelock/#integration-points","title":"Integration Points","text":""},{"location":"protocol/components/timelock/#with-vote-system","title":"With Vote System","text":"<pre><code>1. Vote Creation:\n   - Encrypt vote choice\n   - Generate proofs\n   - Package with nullifier\n\n2. Vote Processing:\n   - Verify encryption\n   - Store encrypted votes\n   - Maintain state\n</code></pre>"},{"location":"protocol/components/timelock/#with-tallying-system","title":"With Tallying System","text":"<pre><code>1. Key Revelation:\n   - Obtain decryption key\n   - Verify timing\n   - Begin decryption\n\n2. Result Computation:\n   - Decrypt votes\n   - Aggregate results\n   - Generate proofs\n</code></pre>"},{"location":"protocol/components/zkp/","title":"Zero Knowledge Proofs","text":""},{"location":"protocol/components/zkp/#zero-knowledge-proof-system","title":"Zero-Knowledge Proof System","text":"<p>ZkSnap uses zero-knowledge proofs to ensure vote validity, privacy, and correctness of the tallying process without revealing any individual votes.</p>"},{"location":"protocol/components/zkp/#circuit-design","title":"Circuit Design","text":""},{"location":"protocol/components/zkp/#vote-circuit","title":"Vote Circuit","text":"<p>The main circuit that proves vote validity and correct encryption.</p>"},{"location":"protocol/components/zkp/#public-inputs","title":"Public Inputs","text":"<pre><code>- Vote nullifier\n- Encrypted vote commitment\n- Public voting key\n- Merkle root of valid voters\n</code></pre>"},{"location":"protocol/components/zkp/#private-inputs","title":"Private Inputs","text":"<pre><code>- Vote choice\n- Vote encryption randomness\n- Private voting key\n- Merkle path for voter inclusion\n</code></pre>"},{"location":"protocol/components/zkp/#constraints","title":"Constraints","text":"<pre><code>1. Voter Eligibility\n   - Merkle path is valid\n   - Voter public key included in tree\n\n2. Vote Validity\n   - Choice within valid range\n   - Correct encryption of choice\n   - Valid nullifier generation\n\n3. Key Ownership\n   - Prove knowledge of private key\n   - Signature verification\n</code></pre>"},{"location":"protocol/components/zkp/#aggregation-circuit","title":"Aggregation Circuit","text":"<p>Circuit for proving correct vote aggregation and tallying.</p>"},{"location":"protocol/components/zkp/#public-inputs_1","title":"Public Inputs","text":"<pre><code>- Previous state root\n- New state root\n- Encrypted tally commitment\n</code></pre>"},{"location":"protocol/components/zkp/#private-inputs_1","title":"Private Inputs","text":"<pre><code>- List of encrypted votes\n- State transition witnesses\n- Aggregation randomness\n</code></pre>"},{"location":"protocol/components/zkp/#constraints_1","title":"Constraints","text":"<pre><code>1. State Transition\n   - Valid state update\n   - Correct vote inclusion\n\n2. Tally Computation\n   - Homomorphic addition\n   - Commitment correctness\n</code></pre>"},{"location":"protocol/components/zkp/#proof-generation","title":"Proof Generation","text":""},{"location":"protocol/components/zkp/#vote-proof","title":"Vote Proof","text":"<ol> <li> <p>Preparation </p><pre><code>- Format inputs\n- Generate nullifier\n- Encrypt vote\n- Create commitments\n</code></pre> </li> <li> <p>Proof Generation </p><pre><code>- Construct witness\n- Generate SNARK proof\n- Package proof data\n</code></pre> </li> </ol>"},{"location":"protocol/components/zkp/#aggregation-proof","title":"Aggregation Proof","text":"<ol> <li> <p>Batch Processing </p><pre><code>- Collect valid votes\n- Update state\n- Compute running tally\n</code></pre> </li> <li> <p>Proof Creation </p><pre><code>- Build aggregation witness\n- Generate batch proof\n- Create state update proof\n</code></pre> </li> </ol>"},{"location":"protocol/components/zkp/#verification-system","title":"Verification System","text":""},{"location":"protocol/components/zkp/#individual-vote-verification","title":"Individual Vote Verification","text":"<ol> <li> <p>Public Verification </p><pre><code>Check:\n- Proof validity\n- Nullifier uniqueness\n- Commitment structure\n</code></pre> </li> <li> <p>Constraints Verification </p><pre><code>Verify:\n- Range constraints\n- Encryption correctness\n- Signature validity\n</code></pre> </li> </ol>"},{"location":"protocol/components/zkp/#batch-verification","title":"Batch Verification","text":"<ol> <li> <p>State Update Verification </p><pre><code>Check:\n- State transition validity\n- Vote inclusion proofs\n- Nullifier set updates\n</code></pre> </li> <li> <p>Tally Verification </p><pre><code>Verify:\n- Homomorphic operations\n- Commitment consistency\n- Final tally validity\n</code></pre> </li> </ol>"},{"location":"protocol/components/zkp/#security-properties","title":"Security Properties","text":""},{"location":"protocol/components/zkp/#proof-properties","title":"Proof Properties","text":"<ol> <li>Zero-Knowledge</li> <li>No vote choice revealed</li> <li>No voter identity leaked</li> <li> <p>No key information exposed</p> </li> <li> <p>Completeness</p> </li> <li>Valid votes always accepted</li> <li>Correct proofs verify</li> <li> <p>Honest execution succeeds</p> </li> <li> <p>Soundness</p> </li> <li>Invalid votes rejected</li> <li>No false proofs accepted</li> <li>Cannot forge valid proofs</li> </ol>"},{"location":"protocol/components/zkp/#trust-assumptions","title":"Trust Assumptions","text":"<ol> <li>Cryptographic</li> <li>Discrete log problem</li> <li>Algebraic group properties</li> <li> <p>Hash function security</p> </li> <li> <p>Protocol</p> </li> <li>Setup phase security</li> <li>Parameters generation</li> <li>CRS trustworthiness</li> </ol>"},{"location":"protocol/components/zkp/#implementation-details","title":"Implementation Details","text":""},{"location":"protocol/components/zkp/#circuit-optimizations","title":"Circuit Optimizations","text":"<ol> <li> <p>Constraint Reduction </p><pre><code>- Efficient range proofs\n- Optimized encryption checks\n- Minimal constraint system\n</code></pre> </li> <li> <p>Performance Considerations </p><pre><code>- Parallel proof generation\n- Batched verification\n- Memory efficient design\n</code></pre> </li> </ol>"},{"location":"protocol/components/zkp/#proof-system-integration","title":"Proof System Integration","text":"<ol> <li> <p>With Vote Processing </p><pre><code>- Proof generation during voting\n- Real-time verification\n- State updates\n</code></pre> </li> <li> <p>With Tallying System </p><pre><code>- Aggregate proof generation\n- Final tally verification\n- Result publication\n</code></pre> </li> </ol>"},{"location":"protocol/components/zkp/#protocol-interactions","title":"Protocol Interactions","text":""},{"location":"protocol/components/zkp/#during-setup","title":"During Setup","text":"<ol> <li> <p>System Setup </p><pre><code>- Generate proving/verification keys\n- Set up circuit parameters\n- Initialize state\n</code></pre> </li> <li> <p>Voter Registration </p><pre><code>- Generate voter proofs\n- Update Merkle tree\n- Verify registration\n</code></pre> </li> </ol>"},{"location":"protocol/components/zkp/#during-voting","title":"During Voting","text":"<ol> <li> <p>Vote Submission </p><pre><code>- Generate vote proof\n- Submit to coordinator\n- Verify acceptance\n</code></pre> </li> <li> <p>State Management </p><pre><code>- Update nullifier set\n- Maintain vote records\n- Track state changes\n</code></pre> </li> </ol>"},{"location":"protocol/phases/setup/","title":"Setup Phase","text":""},{"location":"protocol/phases/setup/#setup-phase","title":"Setup Phase","text":"<p>The setup phase initializes the ZkSnap protocol and establishes the parameters and state needed for secure voting.</p>"},{"location":"protocol/phases/setup/#overview","title":"Overview","text":"<p>The setup phase accomplishes:     - System parameter generation     - Coordinator initialization     - Voter registration process     - Timelock parameter setup</p>"},{"location":"protocol/phases/setup/#protocol-parameters","title":"Protocol Parameters","text":""},{"location":"protocol/phases/setup/#system-parameters","title":"System Parameters","text":"<pre><code>1. Cryptographic Parameters\n   - Proving/verification keys\n   - Encryption parameters\n   - Hash functions\n\n2. Protocol Parameters\n   - Voting duration\n   - Registration period\n   - Batch sizes\n</code></pre>"},{"location":"protocol/phases/setup/#state-initialization","title":"State Initialization","text":"<pre><code>1. Storage Structures\n   - Nullifier set (empty)\n   - Voter registry (Merkle tree)\n   - Vote storage\n\n2. Initial State\n   - Root hash\n   - Configuration hash\n   - Start parameters\n</code></pre>"},{"location":"protocol/phases/setup/#setup-process","title":"Setup Process","text":""},{"location":"protocol/phases/setup/#1-coordinator-setup","title":"1. Coordinator Setup","text":""},{"location":"protocol/phases/setup/#parameter-generation","title":"Parameter Generation","text":"<pre><code>1. Generate encryption keypair (pk_enc, sk_enc)\n2. Create timelock encryption of sk_enc\n3. Initialize empty nullifier set\n4. Generate circuit parameters\n</code></pre>"},{"location":"protocol/phases/setup/#state-initialization_1","title":"State Initialization","text":"<pre><code>1. Create empty voter Merkle tree\n2. Initialize vote storage\n3. Set protocol start time\n4. Publish public parameters\n</code></pre>"},{"location":"protocol/phases/setup/#2-voter-registration","title":"2. Voter Registration","text":""},{"location":"protocol/phases/setup/#registration-process","title":"Registration Process","text":"<pre><code>1. Voter generates registration keypair\n2. Submits public key for registration\n3. Receives registration proof\n4. Added to voter Merkle tree\n</code></pre>"},{"location":"protocol/phases/setup/#key-generation","title":"Key Generation","text":"<pre><code>1. Generate registration key\n2. Generate initial voting key\n3. Store keys securely\n4. Prepare for voting phase\n</code></pre>"},{"location":"protocol/phases/setup/#coordinator-functions","title":"Coordinator Functions","text":""},{"location":"protocol/phases/setup/#parameter-management","title":"Parameter Management","text":"<pre><code>Function: initialize_protocol\nInputs:\n  - Voting duration\n  - Registration period\n  - Security parameters\nOutput:\n  - Protocol parameters\n  - Public keys\n  - Initial state\n</code></pre>"},{"location":"protocol/phases/setup/#registration-handling","title":"Registration Handling","text":"<pre><code>Function: register_voter\nInputs:\n  - Voter public key\n  - Registration proof\nOutput:\n  - Updated Merkle root\n  - Registration confirmation\n</code></pre>"},{"location":"protocol/phases/setup/#verification","title":"Verification","text":""},{"location":"protocol/phases/setup/#setup-verification","title":"Setup Verification","text":"<pre><code>Verify:\n1. Parameter generation correctness\n2. Timelock encryption validity\n3. Initial state integrity\n4. Registration process validity\n</code></pre>"},{"location":"protocol/phases/setup/#registration-verification","title":"Registration Verification","text":"<pre><code>Check:\n1. Voter eligibility\n2. Key validity\n3. Non-duplicate registration\n4. Merkle tree updates\n</code></pre>"},{"location":"protocol/phases/setup/#security-considerations","title":"Security Considerations","text":""},{"location":"protocol/phases/setup/#trust-requirements","title":"Trust Requirements","text":"<ol> <li>Parameter Generation</li> <li>Transparent setup</li> <li>Verifiable parameters</li> <li> <p>No trusted setup for core components</p> </li> <li> <p>Coordinator Trust</p> </li> <li>Semi-honest assumption</li> <li>Cannot manipulate registration</li> <li>Cannot prevent valid registration</li> </ol>"},{"location":"protocol/phases/setup/#security-properties","title":"Security Properties","text":"<ol> <li>Registration Privacy</li> <li>Public keys only</li> <li>No identity linkage</li> <li> <p>Private key secrecy</p> </li> <li> <p>Setup Integrity</p> </li> <li>Verifiable initialization</li> <li>Public parameters</li> <li>Auditable process</li> </ol>"},{"location":"protocol/phases/setup/#error-handling","title":"Error Handling","text":""},{"location":"protocol/phases/setup/#setup-errors","title":"Setup Errors","text":"<pre><code>1. Parameter Generation Failures\n   - Invalid parameters\n   - Timelock setup issues\n   - Circuit generation problems\n\n2. Recovery Procedures\n   - Parameter regeneration\n   - State reset\n   - Fresh initialization\n</code></pre>"},{"location":"protocol/phases/setup/#registration-errors","title":"Registration Errors","text":"<pre><code>1. Invalid Registrations\n   - Duplicate keys\n   - Invalid proofs\n   - Malformed requests\n\n2. Resolution Steps\n   - Reject invalid requests\n   - Clear error states\n   - Update registration status\n</code></pre>"},{"location":"protocol/phases/setup/#implementation-notes","title":"Implementation Notes","text":""},{"location":"protocol/phases/setup/#system-requirements","title":"System Requirements","text":"<pre><code>1. Storage\n   - Merkle tree capacity\n   - State storage\n   - Parameter storage\n\n2. Computation\n   - Parameter generation\n   - Proof generation\n   - State updates\n</code></pre>"},{"location":"protocol/phases/setup/#performance-considerations","title":"Performance Considerations","text":"<pre><code>1. Registration Throughput\n    - Batch processing\n   - Parallel registration\n   - State update efficiency\n\n2. Resource Management\n   - Memory usage\n   - Computation costs\n   - Storage optimization\n</code></pre>"},{"location":"protocol/phases/tallying/","title":"Tallying Phase","text":""},{"location":"protocol/phases/tallying/#tallying-phase","title":"Tallying Phase","text":"<p>The tallying phase occurs after voting ends and the timelock expires, enabling decryption and computation of final results with proofs of correctness.</p>"},{"location":"protocol/phases/tallying/#overview","title":"Overview","text":"<p>The tallying phase involves:     - Timelock expiration     - Vote decryption     - Result computation     - Proof generation</p>"},{"location":"protocol/phases/tallying/#timelock-expiration","title":"Timelock Expiration","text":""},{"location":"protocol/phases/tallying/#key-revelation","title":"Key Revelation","text":"<pre><code>Process:\n1. Wait for timelock period end\n2. Obtain decryption key from DRand\n3. Verify key authenticity\n4. Start decryption process\n</code></pre>"},{"location":"protocol/phases/tallying/#verification","title":"Verification","text":"<pre><code>Checks:\n1. Timelock completion proof\n2. Key correctness proof\n3. Timing validity\n</code></pre>"},{"location":"protocol/phases/tallying/#vote-decryption","title":"Vote Decryption","text":""},{"location":"protocol/phases/tallying/#decryption-process","title":"Decryption Process","text":"<ol> <li> <p>Preparation </p><pre><code>Steps:\n1. Collect all encrypted votes\n2. Verify final state\n3. Prepare decryption batch\n</code></pre> </li> <li> <p>Batch Decryption </p><pre><code>Operations:\n1. Decrypt encrypted tally\n2. Generate decryption proof\n3. Verify correctness\n</code></pre> </li> </ol>"},{"location":"protocol/phases/tallying/#result-computation","title":"Result Computation","text":""},{"location":"protocol/phases/tallying/#tally-calculation","title":"Tally Calculation","text":"<ol> <li> <p>Vote Counting </p><pre><code>Steps:\n1. Process decrypted votes\n2. Compute final tally\n3. Generate tally proof\n</code></pre> </li> <li> <p>Result Verification </p><pre><code>Checks:\n1. Tally correctness\n2. Proof validity\n3. State consistency\n</code></pre> </li> </ol>"},{"location":"protocol/phases/tallying/#proof-generation","title":"Proof Generation","text":""},{"location":"protocol/phases/tallying/#correctness-proofs","title":"Correctness Proofs","text":"<ol> <li> <p>Component Proofs </p><pre><code>Types:\n- Decryption correctness\n- Tally computation\n- State consistency\n</code></pre> </li> <li> <p>Aggregate Proof </p><pre><code>Properties:\n- Combines component proofs\n- Efficient verification\n- Complete auditability\n</code></pre> </li> </ol>"},{"location":"protocol/phases/tallying/#protocol-properties","title":"Protocol Properties","text":""},{"location":"protocol/phases/tallying/#security-guarantees","title":"Security Guarantees","text":"<ol> <li> <p>Privacy </p><pre><code>Ensures:\n- No early result leakage\n- Vote privacy maintained\n- Voter anonymity\n</code></pre> </li> <li> <p>Correctness </p><pre><code>Guarantees:\n- Accurate decryption\n- Correct tallying\n- Verifiable results\n</code></pre> </li> </ol>"},{"location":"protocol/phases/tallying/#verification-process","title":"Verification Process","text":"<ol> <li> <p>Result Verification </p><pre><code>Steps:\n1. Verify decryption proof\n2. Check tally computation\n3. Validate final state\n</code></pre> </li> <li> <p>Public Verification </p><pre><code>Enables:\n- Independent verification\n- Public auditability\n- Result confirmation\n</code></pre> </li> </ol>"},{"location":"protocol/phases/tallying/#implementation-details","title":"Implementation Details","text":""},{"location":"protocol/phases/tallying/#system-requirements","title":"System Requirements","text":"<ol> <li> <p>Computational Resources </p><pre><code>Needs:\n- Decryption capacity\n- Proof generation power\n- Storage for results\n</code></pre> </li> <li> <p>Time Management </p><pre><code>Constraints:\n- Decryption window\n- Proof generation time\n- Publication deadline\n</code></pre> </li> </ol>"},{"location":"protocol/phases/tallying/#error-handling","title":"Error Handling","text":"<ol> <li> <p>Decryption Errors </p><pre><code>Types:\n- Key verification failures\n- Decryption failures\n- Proof generation issues\n</code></pre> </li> <li> <p>Recovery Procedures </p><pre><code>Steps:\n1. Error identification\n2. State recovery\n3. Process restart\n</code></pre> </li> </ol>"},{"location":"protocol/phases/tallying/#result-publication","title":"Result Publication","text":""},{"location":"protocol/phases/tallying/#data-format","title":"Data Format","text":"<ol> <li> <p>Results Structure </p><pre><code>Components:\n- Final tally\n- Decryption proof\n- Verification data\n</code></pre> </li> <li> <p>Verification Package </p><pre><code>Includes:\n- Complete proofs\n- State information\n- Audit trail\n</code></pre> </li> </ol>"},{"location":"protocol/phases/tallying/#publication-process","title":"Publication Process","text":"<ol> <li> <p>Result Release </p><pre><code>Steps:\n1. Format results\n2. Generate verification package\n3. Publish data\n</code></pre> </li> <li> <p>Public Access </p><pre><code>Provides:\n- Result accessibility\n- Verification tools\n- Audit capability\n</code></pre> </li> </ol>"},{"location":"protocol/phases/tallying/#protocol-completion","title":"Protocol Completion","text":""},{"location":"protocol/phases/tallying/#finalization-steps","title":"Finalization Steps","text":"<ol> <li> <p>State Finalization </p><pre><code>Actions:\n1. Lock final state\n2. Archive data\n3. Clean temporary storage\n</code></pre> </li> <li> <p>System Cleanup </p><pre><code>Tasks:\n1. Clear sensitive data\n2. Archive logs\n3. Reset system state\n</code></pre> </li> </ol>"},{"location":"protocol/phases/tallying/#verification-tools","title":"Verification Tools","text":"<ol> <li> <p>Public Verifier </p><pre><code>Features:\n- Result verification\n- Proof checking\n- State validation\n</code></pre> </li> <li> <p>Audit Support </p><pre><code>Provides:\n- Complete audit trail\n- Verification tools\n- Documentation\n</code></pre> </li> </ol>"},{"location":"protocol/phases/voting/","title":"Voting Phase","text":""},{"location":"protocol/phases/voting/#voting-phase","title":"Voting Phase","text":"<p>The voting phase is when registered voters submit their encrypted votes with zero-knowledge proofs of validity.</p>"},{"location":"protocol/phases/voting/#overview","title":"Overview","text":"<p>During this phase:     - Voters create encrypted votes     - Generate validity proofs     - Submit votes to coordinator     - Coordinator verifies and processes votes</p>"},{"location":"protocol/phases/voting/#vote-creation","title":"Vote Creation","text":""},{"location":"protocol/phases/voting/#components","title":"Components","text":"<pre><code>Vote Structure:\n- Encrypted vote choice\n- Nullifier\n- Zero-knowledge proof\n- Public parameters\n</code></pre>"},{"location":"protocol/phases/voting/#creation-process","title":"Creation Process","text":"<ol> <li> <p>Vote Preparation </p><pre><code>Input:\n- Vote choice\n- Voting key pair\n- Protocol parameters\n\nSteps:\n1. Encrypt vote using public key\n2. Generate nullifier\n3. Create validity proof\n4. Package vote data\n</code></pre> </li> <li> <p>Proof Generation </p><pre><code>Required Proofs:\n- Vote validity\n- Voter eligibility\n- Nullifier correctness\n- Encryption validity\n</code></pre> </li> </ol>"},{"location":"protocol/phases/voting/#vote-submission","title":"Vote Submission","text":""},{"location":"protocol/phases/voting/#submission-process","title":"Submission Process","text":"<ol> <li> <p>Voter Actions </p><pre><code>1. Package vote components\n2. Submit to coordinator\n3. Verify acceptance\n4. Receive confirmation\n</code></pre> </li> <li> <p>Protocol Validation </p><pre><code>Checks:\n- Proof validity\n- Nullifier uniqueness\n- Vote format\n- Timing constraints\n</code></pre> </li> </ol>"},{"location":"protocol/phases/voting/#coordinator-processing","title":"Coordinator Processing","text":""},{"location":"protocol/phases/voting/#vote-processing","title":"Vote Processing","text":"<ol> <li> <p>Initial Checks </p><pre><code>Verify:\n- Vote structure\n- Timing validity\n- Proof integrity\n- Nullifier status\n</code></pre> </li> <li> <p>State Updates </p><pre><code>Actions:\n- Add nullifier\n- Update state\n- Store encrypted vote\n- Log submission\n</code></pre> </li> </ol>"},{"location":"protocol/phases/voting/#batch-processing","title":"Batch Processing","text":"<ol> <li> <p>Vote Aggregation </p><pre><code>Operations:\n- Collect valid votes\n- Update Merkle roots\n- Maintain state consistency\n</code></pre> </li> <li> <p>State Management </p><pre><code>Track:\n- Vote count\n- Nullifier set\n- Encrypted tally\n- System state\n</code></pre> </li> </ol>"},{"location":"protocol/phases/voting/#security-properties","title":"Security Properties","text":""},{"location":"protocol/phases/voting/#vote-privacy","title":"Vote Privacy","text":"<ol> <li> <p>Encryption Security </p><pre><code>Guarantees:\n- Vote content hidden\n- Voter privacy preserved\n- No early decryption\n</code></pre> </li> <li> <p>Nullifier Privacy </p><pre><code>Properties:\n- Unlinkable to voter\n- Prevents double voting\n- No vote tracking\n</code></pre> </li> </ol>"},{"location":"protocol/phases/voting/#vote-integrity","title":"Vote Integrity","text":"<ol> <li> <p>Proof Verification </p><pre><code>Ensures:\n- Valid vote choice\n- Correct encryption\n- Proper nullifier\n</code></pre> </li> <li> <p>State Integrity </p><pre><code>Maintains:\n- Consistent state\n- Valid updates\n- Verifiable changes\n</code></pre> </li> </ol>"},{"location":"protocol/phases/voting/#error-handling","title":"Error Handling","text":""},{"location":"protocol/phases/voting/#vote-submission-errors","title":"Vote Submission Errors","text":"<ol> <li> <p>Invalid Votes </p><pre><code>Cases:\n- Invalid proofs\n- Used nullifiers\n- Malformed votes\n- Timing violations\n</code></pre> </li> <li> <p>Resolution </p><pre><code>Steps:\n- Reject invalid votes\n- Provide error details\n- Allow resubmission\n- Log failures\n</code></pre> </li> </ol>"},{"location":"protocol/phases/voting/#system-errors","title":"System Errors","text":"<ol> <li> <p>Processing Failures </p><pre><code>Types:\n- State update failures\n- Proof verification errors\n- Storage issues\n</code></pre> </li> <li> <p>Recovery </p><pre><code>Actions:\n- State rollback\n- Error logging\n- System recovery\n- Vote reprocessing\n</code></pre> </li> </ol>"},{"location":"protocol/phases/voting/#implementation-details","title":"Implementation Details","text":""},{"location":"protocol/phases/voting/#performance-optimization","title":"Performance Optimization","text":"<ol> <li> <p>Batch Processing </p><pre><code>Methods:\n- Parallel verification\n- Batched updates\n- Efficient storage\n</code></pre> </li> <li> <p>Resource Management </p><pre><code>Considerations:\n- Memory usage\n- Computation costs\n- Storage efficiency\n</code></pre> </li> </ol>"},{"location":"protocol/phases/voting/#system-constraints","title":"System Constraints","text":"<ol> <li> <p>Timing Requirements </p><pre><code>Limits:\n- Vote submission window\n- Processing deadlines\n- Verification timeouts\n</code></pre> </li> <li> <p>Resource Limits </p><pre><code>Bounds:\n- Maximum votes per batch\n- Storage capacity\n- Computation limits\n</code></pre> </li> </ol>"},{"location":"protocol/phases/voting/#protocol-interactions","title":"Protocol Interactions","text":""},{"location":"protocol/phases/voting/#with-setup-phase","title":"With Setup Phase","text":"<pre><code>Dependencies:\n- Registration status\n- System parameters\n- Initial state\n</code></pre>"},{"location":"protocol/phases/voting/#with-tallying-phase","title":"With Tallying Phase","text":"<pre><code>Preparation:\n- Vote collection complete\n- State finalization\n- Transition readiness\n</code></pre>"},{"location":"security/attack-vectors/","title":"Attack Vectors","text":""},{"location":"security/attack-vectors/#attack-vectors","title":"Attack Vectors","text":"<p>This document details potential attacks against the ZkSnap protocol and their mitigations.</p>"},{"location":"security/attack-vectors/#vote-buying-attacks","title":"Vote Buying Attacks","text":""},{"location":"security/attack-vectors/#direct-vote-buying","title":"Direct Vote Buying","text":"<ol> <li> <p>Attack Description </p><pre><code>Method:\n- Attacker offers payment for votes\n- Requests proof of vote choice\n- Attempts to verify compliance\n\nGoal:\n- Purchase specific votes\n- Verify vote execution\n- Influence outcome\n</code></pre> </li> <li> <p>Protocol Defense </p><pre><code>Mitigations:\n- Hidden vote contents\n- Impossible to prove vote choice\n- No vote-voter correlation\n- Timelock encryption\n</code></pre> </li> </ol>"},{"location":"security/attack-vectors/#vote-selling-schemes","title":"Vote Selling Schemes","text":"<ol> <li> <p>Attack Vectors </p><pre><code>Attempts:\n- Voluntary vote selling\n- Proof generation schemes\n- Vote verification methods\n</code></pre> </li> <li> <p>Prevention Mechanisms </p><pre><code>Defenses:\n- No provable vote contents\n- No verifiable voting proofs\n- No timing correlation\n</code></pre> </li> </ol>"},{"location":"security/attack-vectors/#privacy-attacks","title":"Privacy Attacks","text":""},{"location":"security/attack-vectors/#correlation-attacks","title":"Correlation Attacks","text":"<ol> <li> <p>Methods </p><pre><code>Types:\n- Timing analysis\n- Network observation\n- State monitoring\n- Pattern matching\n</code></pre> </li> <li> <p>Protocol Protection </p><pre><code>Measures:\n- Encrypted communication\n- Random delays\n- Private key changes\n- State privacy\n</code></pre> </li> </ol>"},{"location":"security/attack-vectors/#identity-linking","title":"Identity Linking","text":"<ol> <li> <p>Attack Patterns </p><pre><code>Vectors:\n- Public key analysis\n- Nullifier correlation\n- Transaction linking\n- Timing correlation\n</code></pre> </li> <li> <p>Mitigation Strategy </p><pre><code>Defenses:\n- Key unlinkability\n- Private nullifiers\n- Timing obfuscation\n</code></pre> </li> </ol>"},{"location":"security/attack-vectors/#protocol-attacks","title":"Protocol Attacks","text":""},{"location":"security/attack-vectors/#double-voting","title":"Double Voting","text":"<ol> <li> <p>Attack Mechanism </p><pre><code>Attempts:\n- Multiple vote submission\n- Nullifier manipulation\n- State corruption\n</code></pre> </li> <li> <p>Prevention </p><pre><code>Methods:\n- Unique nullifiers\n- State consistency checks\n- Proof verification\n</code></pre> </li> </ol>"},{"location":"security/attack-vectors/#state-corruption","title":"State Corruption","text":"<ol> <li> <p>Attack Vectors </p><pre><code>Types:\n- Invalid state updates\n- Merkle tree manipulation\n- Nullifier set corruption\n</code></pre> </li> <li> <p>Defense Mechanisms </p><pre><code>Protection:\n- State verification\n- Proof requirements\n- Consistency checks\n</code></pre> </li> </ol>"},{"location":"security/attack-vectors/#network-attacks","title":"Network Attacks","text":""},{"location":"security/attack-vectors/#message-interception","title":"Message Interception","text":"<ol> <li> <p>Attack Methods </p><pre><code>Vectors:\n- Vote capture\n- Proof interception\n- State monitoring\n</code></pre> </li> <li> <p>Mitigation </p><pre><code>Defenses:\n- Encrypted communication\n- Message authentication\n- Replay protection\n</code></pre> </li> </ol>"},{"location":"security/collusion-resistance/","title":"Collusion Resistance","text":""},{"location":"security/collusion-resistance/#collusion-resistance","title":"Collusion Resistance","text":"<p>This document details how ZkSnap prevents vote buying and selling through its cryptographic design and protocol mechanisms.</p>"},{"location":"security/collusion-resistance/#threat-model","title":"Threat Model","text":""},{"location":"security/collusion-resistance/#attack-scenarios","title":"Attack Scenarios","text":"<ol> <li> <p>Direct Vote Buying</p> <ul> <li>Attacker offers payment for specific votes</li> <li>Requests proof of voting choice</li> <li>Attempts to verify vote compliance</li> </ul> </li> <li> <p>Coercion Attempts</p> <ul> <li>Forced vote choices</li> <li>Demanded vote proofs</li> <li>Verification of compliance</li> </ul> </li> <li> <p>Vote Selling</p> <ul> <li>Voluntary vote selling</li> <li>Proof of vote choice</li> <li>Vote verification schemes</li> </ul> </li> </ol>"},{"location":"security/collusion-resistance/#security-mechanisms","title":"Security Mechanisms","text":""},{"location":"security/collusion-resistance/#1-key-privacy","title":"1. Key Privacy","text":"<p>The dual key system prevents vote proving:</p> <ol> <li> <p>Registration Key</p> <ul> <li>Never used for voting</li> <li>Only proves eligibility</li> <li>Cannot link to votes</li> </ul> </li> <li> <p>Voting Key</p> <ul> <li>Used for actual voting</li> <li>Cannot prove which key voted</li> <li>No public key history</li> </ul> </li> </ol>"},{"location":"security/collusion-resistance/#2-vote-privacy","title":"2. Vote Privacy","text":"<p>Multiple layers ensure vote content privacy:</p> <ol> <li> <p>Encryption</p> <ul> <li>Homomorphic encryption</li> <li>Timelock protection</li> <li>No early decryption</li> </ul> </li> <li> <p>Proof System</p> <ul> <li>Zero-knowledge proofs</li> <li>No vote content revelation</li> <li>Validity verification only</li> </ul> </li> </ol>"},{"location":"security/collusion-resistance/#3-nullifier-system","title":"3. Nullifier System","text":"<p>Ensures one-time voting while maintaining privacy:</p> <ol> <li> <p>Properties</p> <ul> <li>One nullifier per voter</li> <li>Cannot link to identity</li> <li>Prevents double voting</li> </ul> </li> <li> <p>Privacy Features</p> <ul> <li>No voter correlation</li> <li>No vote linkability</li> <li>Deterministic generation</li> </ul> </li> </ol>"},{"location":"security/collusion-resistance/#attack-prevention","title":"Attack Prevention","text":""},{"location":"security/collusion-resistance/#vote-buying-prevention","title":"Vote Buying Prevention","text":"<ol> <li> <p>Proof Impossibility </p><pre><code>Why vote buying fails:\n- Cannot prove vote choice\n- Cannot verify vote timing\n- Cannot link voter to vote\n</code></pre> </li> <li> <p>Deniability </p><pre><code>Voter capabilities:\n- Generate fake proofs\n- Cannot prove real vote\n- Maintain plausible deniability\n</code></pre> </li> </ol>"},{"location":"security/collusion-resistance/#coercion-resistance","title":"Coercion Resistance","text":"<ol> <li> <p>Vote Privacy </p><pre><code>Properties:\n- Vote contents hidden\n- No proof of choice\n- No timing information\n</code></pre> </li> <li> <p>Identity Protection </p><pre><code>Features:\n- Anonymous voting\n- Unlinkable actions\n- Private key management\n</code></pre> </li> </ol>"},{"location":"security/collusion-resistance/#security-guarantees","title":"Security Guarantees","text":""},{"location":"security/collusion-resistance/#cryptographic-guarantees","title":"Cryptographic Guarantees","text":"<ol> <li> <p>Vote Privacy </p><pre><code>Ensures:\n- Vote content secrecy\n- Voter anonymity\n- Action unlinkability\n</code></pre> </li> <li> <p>Proof Soundness </p><pre><code>Provides:\n- Valid vote verification\n- No false proofs\n- Correct tallying\n</code></pre> </li> </ol>"},{"location":"security/collusion-resistance/#protocol-guarantees","title":"Protocol Guarantees","text":"<ol> <li> <p>Temporal Privacy </p><pre><code>Until timelock expiration:\n- No vote decryption\n- No partial results\n- No tally information\n</code></pre> </li> <li> <p>Participation Privacy </p><pre><code>Protected information:\n- Voter identity\n- Vote timing\n- Vote correlation\n</code></pre> </li> </ol>"},{"location":"security/collusion-resistance/#implementation-requirements","title":"Implementation Requirements","text":""},{"location":"security/collusion-resistance/#system-requirements","title":"System Requirements","text":"<ol> <li> <p>Cryptographic Implementation </p><pre><code>Requirements:\n- Secure random generation\n- Proper key management\n- Robust encryption\n</code></pre> </li> <li> <p>Protocol Implementation </p><pre><code>Needs:\n- Correct proof generation\n- Secure state management\n- Proper nullifier handling\n</code></pre> </li> </ol>"},{"location":"security/collusion-resistance/#security-considerations","title":"Security Considerations","text":"<ol> <li> <p>Key Management </p><pre><code>Guidelines:\n- Secure key storage\n- Private key protection\n- Key update procedures\n</code></pre> </li> <li> <p>Proof Generation </p><pre><code>Requirements:\n- Correct circuit implementation\n- Secure parameter generation\n- Proper randomness use\n</code></pre> </li> </ol>"},{"location":"security/collusion-resistance/#verification-methods","title":"Verification Methods","text":""},{"location":"security/collusion-resistance/#proof-verification","title":"Proof Verification","text":"<ol> <li> <p>Vote Proofs </p><pre><code>Verify:\n- Vote validity\n- Nullifier correctness\n- Key ownership\n</code></pre> </li> <li> <p>Tally Proofs </p><pre><code>Check:\n- Result correctness\n- State consistency\n- Proper aggregation\n</code></pre> </li> </ol>"},{"location":"security/privacy/","title":"Privacy Guarantees","text":""},{"location":"security/privacy/#privacy-guarantees","title":"Privacy Guarantees","text":"<p>This document details the privacy guarantees provided by the ZkSnap protocol and their cryptographic foundations.</p>"},{"location":"security/privacy/#core-privacy-properties","title":"Core Privacy Properties","text":""},{"location":"security/privacy/#vote-privacy","title":"Vote Privacy","text":"<ol> <li> <p>Content Privacy </p><pre><code>Guaranteed Properties:\n- Vote contents remain encrypted\n- No partial information leakage\n- No early result revelation\n- Individual votes remain private after tally\n</code></pre> </li> <li> <p>Time-Based Privacy </p><pre><code>Properties:\n- No information before timelock expiry\n- Uniform vote timing\n- No early tallying\n- Coordinated result revelation\n</code></pre> </li> </ol>"},{"location":"security/privacy/#voter-privacy","title":"Voter Privacy","text":"<ol> <li> <p>Identity Protection </p><pre><code>Guarantees:\n- Voter anonymity\n- No vote-voter correlation\n- Protected participation status\n- No identifiable patterns\n</code></pre> </li> <li> <p>Action Privacy </p><pre><code>Properties:\n- Unlinkable voting actions\n- Private key operations\n- Hidden state changes\n- No behavioral fingerprinting\n</code></pre> </li> </ol>"},{"location":"security/privacy/#privacy-mechanisms","title":"Privacy Mechanisms","text":""},{"location":"security/privacy/#cryptographic-privacy","title":"Cryptographic Privacy","text":"<ol> <li> <p>Encryption Layers </p><pre><code>Components:\n- Homomorphic vote encryption\n- Timelock encryption\n- Secure key generation\n- Private state updates\n</code></pre> </li> <li> <p>Zero-Knowledge Proofs </p><pre><code>Features:\n- No information leakage\n- Valid computation proof\n- Hidden private inputs\n- Verifiable results\n</code></pre> </li> </ol>"},{"location":"security/privacy/#protocol-privacy","title":"Protocol Privacy","text":"<ol> <li> <p>Nullifier Privacy </p><pre><code>Properties:\n- Unlinkable to voter\n- One-time use\n- No correlation possible\n- Private generation\n</code></pre> </li> <li> <p>State Privacy </p><pre><code>Guarantees:\n- Private state updates\n- Hidden intermediate states\n- Encrypted aggregation\n- Protected final state\n</code></pre> </li> </ol>"},{"location":"security/privacy/#information-flow","title":"Information Flow","text":""},{"location":"security/privacy/#public-information","title":"Public Information","text":"<ol> <li> <p>Protocol Parameters </p><pre><code>Visible Data:\n- Public keys\n- Protocol parameters\n- Nullifier set\n- Encrypted votes\n</code></pre> </li> <li> <p>Results </p><pre><code>Available Data:\n- Final tally\n- Validity proofs\n- Timing information\n- Participation count\n</code></pre> </li> </ol>"},{"location":"security/privacy/#protected-information","title":"Protected Information","text":"<ol> <li> <p>Private Data </p><pre><code>Hidden:\n- Vote choices\n- Voter identities\n- Key relationships\n- Vote timing\n</code></pre> </li> <li> <p>State Information </p><pre><code>Protected:\n- Intermediate states\n- Vote patterns\n- Key changes\n- Processing details\n</code></pre> </li> </ol>"},{"location":"security/privacy/#privacy-analysis","title":"Privacy Analysis","text":""},{"location":"security/privacy/#statistical-privacy","title":"Statistical Privacy","text":"<ol> <li> <p>Distribution Properties </p><pre><code>Guarantees:\n- Uniform vote distribution\n- Random-looking nullifiers\n- Independent operations\n- No statistical leakage\n</code></pre> </li> <li> <p>Pattern Resistance </p><pre><code>Features:\n- No timing patterns\n- Random-looking operations\n- Protected batch sizes\n- Hidden relationships\n</code></pre> </li> </ol>"},{"location":"security/privacy/#temporal-privacy","title":"Temporal Privacy","text":"<ol> <li> <p>Time-Based Security </p><pre><code>Properties:\n- No early information\n- Protected voting period\n- Uniform processing\n- Coordinated revelation\n</code></pre> </li> <li> <p>Forward Privacy </p><pre><code>Guarantees:\n- Future privacy protection\n- No historical correlation\n- Protected past actions\n- Long-term security\n</code></pre> </li> </ol>"},{"location":"security/privacy/#implementation-requirements","title":"Implementation Requirements","text":""},{"location":"security/privacy/#system-requirements","title":"System Requirements","text":"<ol> <li> <p>Privacy Features </p><pre><code>Needs:\n- Secure random generation\n- Protected memory handling\n- Secure key storage\n- Private computation\n</code></pre> </li> <li> <p>Operation Requirements </p><pre><code>Requirements:\n- Side-channel protection\n- Timing protection\n- Memory safety\n- Secure cleanup\n</code></pre> </li> </ol>"},{"location":"security/privacy/#security-measures","title":"Security Measures","text":"<ol> <li> <p>Implementation Security </p><pre><code>Measures:\n- Constant-time operations\n- Memory protection\n- Secure erasure\n- Protected state\n</code></pre> </li> <li> <p>Operational Security </p><pre><code>Procedures:\n- Secure key handling\n- Protected processing\n- Safe state management\n- Secure cleanup\n</code></pre> </li> </ol>"},{"location":"security/threat-model/","title":"Threat Model","text":""},{"location":"security/threat-model/#threat-model","title":"Threat Model","text":"<p>This document outlines the security assumptions, adversarial capabilities, and trust model of the ZkSnap protocol.</p>"},{"location":"security/threat-model/#system-model","title":"System Model","text":""},{"location":"security/threat-model/#protocol-participants","title":"Protocol Participants","text":"<ol> <li>Voters</li> <li>Hold registration and voting keys</li> <li>Create and submit votes</li> <li> <p>Verify results</p> </li> <li> <p>Coordinator</p> </li> <li>Processes votes</li> <li>Maintains state</li> <li> <p>Generates proofs</p> </li> <li> <p>DRand Service</p> </li> <li>Provides timelock encryption</li> <li>Distributed trust</li> <li>Time-based decryption</li> </ol>"},{"location":"security/threat-model/#trust-assumptions","title":"Trust Assumptions","text":""},{"location":"security/threat-model/#coordinator-trust-model","title":"Coordinator Trust Model","text":"<ol> <li>Semi-Honest Model</li> <li>Follows protocol correctly</li> <li>May attempt to learn vote contents</li> <li>Cannot forge votes or proofs</li> <li> <p>Cannot prevent valid vote inclusion</p> </li> <li> <p>Capabilities and Limitations </p><pre><code>Can:\n- View encrypted votes\n- Process submissions\n- Generate proofs\n- Manage state\n\nCannot:\n- Decrypt votes early\n- Forge valid votes\n- Link votes to voters\n- Prevent valid voting\n</code></pre> </li> </ol>"},{"location":"security/threat-model/#drand-assumptions","title":"DRand Assumptions","text":"<ol> <li> <p>Security Model </p><pre><code>Assumes:\n- Threshold security\n- Byzantine fault tolerance\n- Distributed trust\n- Correct time maintenance\n</code></pre> </li> <li> <p>Trust Requirements </p><pre><code>- Majority honest participants\n- Correct time-lock enforcement\n- Proper key revelation\n- Protocol adherence\n</code></pre> </li> </ol>"},{"location":"security/threat-model/#adversarial-model","title":"Adversarial Model","text":""},{"location":"security/threat-model/#adversary-capabilities","title":"Adversary Capabilities","text":"<ol> <li> <p>Network Control </p><pre><code>Can:\n- Observe all communications\n- Delay messages\n- Read public data\n- Track timing\n\nCannot:\n- Modify messages\n- Block communications entirely\n- Break encryption\n</code></pre> </li> <li> <p>Computation Power </p><pre><code>Assumed Limits:\n- Polynomial-time computation\n- No quantum capabilities\n- Standard cryptographic bounds\n- Cannot break timelock\n</code></pre> </li> </ol>"},{"location":"security/threat-model/#attack-vectors","title":"Attack Vectors","text":"<ol> <li> <p>Vote Privacy Attacks </p><pre><code>Types:\n- Vote content analysis\n- Timing analysis\n- Correlation attacks\n- Identity linking\n</code></pre> </li> <li> <p>Protocol Attacks </p><pre><code>Categories:\n- Double voting attempts\n- Invalid vote insertion\n- State corruption\n- Proof forgery\n</code></pre> </li> </ol>"},{"location":"security/threat-model/#security-properties","title":"Security Properties","text":""},{"location":"security/threat-model/#vote-privacy","title":"Vote Privacy","text":"<ol> <li> <p>Content Privacy </p><pre><code>Guarantees:\n- Vote secrecy until tally\n- No partial information leakage\n- No statistical inference\n</code></pre> </li> <li> <p>Voter Privacy </p><pre><code>Ensures:\n- Voter anonymity\n- Action unlinkability\n- Participation privacy\n</code></pre> </li> </ol>"},{"location":"security/threat-model/#vote-integrity","title":"Vote Integrity","text":"<ol> <li> <p>Correctness </p><pre><code>Properties:\n- One vote per voter\n- No vote modification\n- Accurate tallying\n</code></pre> </li> <li> <p>Verifiability </p><pre><code>Features:\n- Public verification\n- Proof validation\n- Result auditability\n</code></pre> </li> </ol>"},{"location":"security/threat-model/#attack-scenarios","title":"Attack Scenarios","text":""},{"location":"security/threat-model/#network-level-attacks","title":"Network-Level Attacks","text":"<ol> <li> <p>Communication Attacks </p><pre><code>Types:\n- Message interception\n- Timing analysis\n- Replay attacks\n- Man-in-the-middle\n</code></pre> </li> <li> <p>Mitigation </p><pre><code>Methods:\n- Encryption\n- Authentication\n- Replay protection\n- Timing resistance\n</code></pre> </li> </ol>"},{"location":"security/threat-model/#protocol-level-attacks","title":"Protocol-Level Attacks","text":"<ol> <li> <p>Vote Manipulation </p><pre><code>Attempts:\n- Invalid vote insertion\n- Vote modification\n- Double voting\n- State corruption\n</code></pre> </li> <li> <p>Countermeasures </p><pre><code>Protections:\n- ZK proofs\n- Nullifier system\n- State verification\n- Proof validation\n</code></pre> </li> </ol>"},{"location":"security/threat-model/#security-analysis","title":"Security Analysis","text":""},{"location":"security/threat-model/#formal-properties","title":"Formal Properties","text":"<ol> <li> <p>Privacy Properties </p><pre><code>- Vote secrecy\n- Voter anonymity\n- Unlinkability\n- Forward security\n</code></pre> </li> <li> <p>Integrity Properties </p><pre><code>- Vote correctness\n- Tally accuracy\n- State consistency\n- Proof soundness\n</code></pre> </li> </ol>"},{"location":"security/threat-model/#security-reductions","title":"Security Reductions","text":"<ol> <li> <p>Cryptographic Assumptions </p><pre><code>Based on:\n- Discrete logarithm\n- Zero-knowledge soundness\n- Timelock puzzles\n- Hash security\n</code></pre> </li> <li> <p>Protocol Security ```plaintext Relies on:</p> </li> <li>Semi-honest coordinator</li> <li>DRand security</li> <li>Network assumptions</li> <li>Cryptographic primitives</li> </ol>"},{"location":"technical/circuits/","title":"Circuit Design","text":""},{"location":"technical/circuits/#circuit-design","title":"Circuit Design","text":"<p>This document details the zero-knowledge circuits used in ZkSnap for vote validity and tallying.</p>"},{"location":"technical/circuits/#vote-circuit","title":"Vote Circuit","text":""},{"location":"technical/circuits/#circuit-structure","title":"Circuit Structure","text":"<ol> <li> <p>Public Inputs </p><pre><code>- Vote nullifier\n- Encrypted vote commitment\n- Public voting key\n- Merkle root of voters\n- Protocol parameters\n</code></pre> </li> <li> <p>Private Inputs </p><pre><code>- Vote choice\n- Vote encryption randomness\n- Private voting key\n- Merkle path\n- Auxiliary data\n</code></pre> </li> </ol>"},{"location":"technical/circuits/#circuit-components","title":"Circuit Components","text":"<ol> <li> <p>Vote Validity </p><pre><code>Constraints:\n1. Range check on vote choice\n   - 0 &lt;= choice &lt; num_options\n   - Bit decomposition check\n\n2. Encryption correctness\n   - c = Enc(vote, r, pk)\n   - Homomorphic properties maintained\n</code></pre> </li> <li> <p>Nullifier Verification </p><pre><code>Constraints:\n1. Nullifier computation\n   - N = PLUME(sk, vote_data)\n   - Uniqueness verification\n\n2. Membership check\n   - Not in nullifier set\n   - Correct generation\n</code></pre> </li> <li> <p>Key Verification </p><pre><code>Prove:\n1. Knowledge of private key\n   - Key pair validity\n   - Signature verification\n\n2. Merkle path validity\n   - Path correctness\n   - Root matching\n</code></pre> </li> </ol>"},{"location":"technical/circuits/#aggregation-circuit","title":"Aggregation Circuit","text":""},{"location":"technical/circuits/#structure","title":"Structure","text":"<ol> <li> <p>Public Inputs </p><pre><code>- Previous state root\n- New state root\n- Aggregated vote commitment\n- Batch parameters\n</code></pre> </li> <li> <p>Private Inputs </p><pre><code>- List of encrypted votes\n- Vote validity proofs\n- State transition data\n- Aggregation witnesses\n</code></pre> </li> </ol>"},{"location":"technical/circuits/#components","title":"Components","text":"<ol> <li> <p>Batch Verification </p><pre><code>Checks:\n1. Vote validity\n   - Individual proofs\n   - Nullifier uniqueness\n   - Format correctness\n\n2. State transitions\n   - Root updates\n   - Consistency checks\n</code></pre> </li> <li> <p>Homomorphic Operations </p><pre><code>Compute:\n1. Vote aggregation\n   - Homomorphic addition\n   - Commitment updates\n\n2. State updates\n   - Tree modifications\n   - Root calculations\n</code></pre> </li> </ol>"},{"location":"technical/crypto-primitives/","title":"Cryptographic Primitives","text":""},{"location":"technical/crypto-primitives/#cryptographic-primitives","title":"Cryptographic Primitives","text":"<p>This document details the cryptographic building blocks used in ZkSnap.</p>"},{"location":"technical/crypto-primitives/#homomorphic-encryption","title":"Homomorphic Encryption","text":""},{"location":"technical/crypto-primitives/#paillier-cryptosystem","title":"Paillier Cryptosystem","text":"<ol> <li> <p>Key Generation </p><pre><code>Generate two large primes p, q where:\n- length(p) = length(q)\n- gcd(pq, (p-1)(q-1)) = 1\n\nCompute:\n- n = pq\n- \u03bb = lcm(p-1, q-1)\n- g in Z*_n\u00b2\n- \u03bc = (L(g^\u03bb mod n\u00b2))^(-1) mod n\n  where L(x) = (x-1)/n\n\nOutput:\n- Public key: (n, g)\n- Private key: (\u03bb, \u03bc)\n</code></pre> </li> <li> <p>Encryption </p><pre><code>Input:\n- Message m in Z_n\n- Random r in Z*_n\n- Public key (n, g)\n\nCompute:\nc = g^m * r^n mod n\u00b2\n\nOutput:\n- Ciphertext c\n</code></pre> </li> <li> <p>Decryption </p><pre><code>Input:\n- Ciphertext c\n- Private key (\u03bb, \u03bc)\n\nCompute:\nm = L(c^\u03bb mod n\u00b2) * \u03bc mod n\n\nOutput:\n- Message m\n</code></pre> </li> </ol>"},{"location":"technical/crypto-primitives/#plume-nullifiers","title":"PLUME Nullifiers","text":""},{"location":"technical/crypto-primitives/#nullifier-generation","title":"Nullifier Generation","text":"<ol> <li> <p>Components </p><pre><code>Input:\n- Private key sk\n- Message m (vote data)\n- Domain separator d\n\nProperties:\n- Deterministic output\n- Unique per (key, message)\n- Non-invertible\n</code></pre> </li> <li> <p>Generation Process </p><pre><code>Steps:\n1. h = Hash(m || d)\n2. s = PLUME_sign(sk, h)\n3. N = Hash(s)\n\nOutput:\n- Nullifier N\n</code></pre> </li> </ol>"},{"location":"technical/crypto-primitives/#zero-knowledge-circuits","title":"Zero-Knowledge Circuits","text":""},{"location":"technical/crypto-primitives/#base-components","title":"Base Components","text":"<ol> <li> <p>Field Arithmetic </p><pre><code>Operations:\n- Field addition\n- Field multiplication\n- Field inversion\n- Scalar multiplication\n</code></pre> </li> <li> <p>Range Constraints </p><pre><code>Features:\n- Efficient range proofs\n- Binary decomposition\n- Comparison circuits\n- Membership proofs\n</code></pre> </li> </ol>"},{"location":"technical/crypto-primitives/#encryption-circuit","title":"Encryption Circuit","text":"<ol> <li> <p>Structure </p><pre><code>Public Inputs:\n- Encrypted vote\n- Public key\n- Vote parameters\n\nPrivate Inputs:\n- Vote choice\n- Randomness\n- Private key\n</code></pre> </li> <li> <p>Constraints </p><pre><code>Verify:\n- Proper encryption\n- Valid range\n- Correct format\n</code></pre> </li> </ol>"},{"location":"technical/crypto-primitives/#timelock-encryption","title":"Timelock Encryption","text":""},{"location":"technical/crypto-primitives/#drand-integration","title":"DRand Integration","text":"<ol> <li> <p>Setup </p><pre><code>Parameters:\n- Time difficulty T\n- Security parameter \u03bb\n- Beacon frequency\n</code></pre> </li> <li> <p>Key Generation </p><pre><code>Process:\n1. Generate encryption keys\n2. Create timelock puzzle\n3. Encrypt decryption key\n4. Set reveal parameters\n</code></pre> </li> </ol>"},{"location":"technical/crypto-primitives/#protocol-constants","title":"Protocol Constants","text":""},{"location":"technical/crypto-primitives/#security-parameters","title":"Security Parameters","text":"<ol> <li> <p>Field Parameters </p><pre><code>Specifications:\n- Field size: 254 bits\n- Security level: 128 bits\n- Hash length: 256 bits\n</code></pre> </li> <li> <p>Protocol Parameters </p><pre><code>Settings:\n- Batch size: 1024\n- Tree depth: 32\n- Window size: 256\n</code></pre> </li> </ol>"},{"location":"technical/crypto-primitives/#hashing-schemes","title":"Hashing Schemes","text":""},{"location":"technical/crypto-primitives/#hash-functions","title":"Hash Functions","text":"<ol> <li> <p>Requirements </p><pre><code>Properties:\n- Collision resistant\n- Pre-image resistant\n- Length-extension resistant\n</code></pre> </li> <li> <p>Usage Contexts </p><pre><code>Applications:\n- Nullifier generation\n- State commitments\n- Message hashing\n- Tree nodes\n</code></pre> </li> </ol>"},{"location":"technical/crypto-primitives/#merkle-trees","title":"Merkle Trees","text":""},{"location":"technical/crypto-primitives/#indexed-merkle-tree","title":"Indexed Merkle Tree","text":"<ol> <li> <p>Structure </p><pre><code>Components:\n- Binary tree\n- Index pointers\n- Efficient updates\n- O(log n) proofs\n</code></pre> </li> <li> <p>Operations </p><pre><code>Functions:\n- Insert element\n- Generate proof\n- Verify proof\n- Update state\n</code></pre> </li> </ol>"}]}